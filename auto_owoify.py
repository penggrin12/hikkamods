# The MIT License (MIT)
# Copyright (c) 2022 penggrin

# meta developer: @PenggrinModules
# scope: hikka_only

from .. import loader, utils
import logging

import re
import random

logger = logging.getLogger(__name__)


@loader.tds
class AutoOwoifyMod(loader.Module):
    """Makes your messages look more awesome!\nDont forget to look in .config"""

    strings = {
        "name": "AutoOwOify",
        "config_enable": "Status of this module",
        "done": "‚ù§Ô∏è Done!",
    }

    strings_ru = {
        "config_enable": "–°—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è",
        "done": "‚ù§Ô∏è –ì–æ—Ç–æ–≤–æ!",
    }

    def __init__(self):
        self._kaomoji = [
            "(*^œâ^)",
            "(‚óï‚Äø‚óï‚úø)",
            "(‚óï·¥•‚óï)",
            " ï‚Ä¢·¥•‚Ä¢ î",
            " ïÔø´·¥•Ôø© î",
            "(*^.^*)",
            "owo",
            "OwO",
            "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)",
            "uwu",
            "UwU",
            "(*Ôø£–∑Ôø£)",
            ">w<",
            "^w^",
            "(„Å§‚úßœâ‚úß)„Å§",
            "(/ =œâ=)/",
        ]

        self._patterns = {
            r"[lr]": "w",
            r"[LR]": "W",
            r"[–ª—Ä]": "–≤",
            r"[–õ–†]": "–í",
            r"n([aeiou])": "ny\\1",
            r"N([aeiou])": "Ny\\1",
            r"N([AEIOU])": "NY\\1",
            "th": "d",
            "ove": "uv",
            "no": "nu",
            r"!+": lambda _: " " + random.choice(self._kaomoji),
        }

        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enable",
                False,
                lambda: self.strings("config_enable"),
                validator=loader.validators.Boolean(),
            ),
        )

    def owoify(self, text):
        for pattern, repl in self._patterns.items():
            text = re.sub(pattern, repl, text)

        return text

    @loader.command(ru_doc="<text:str> - OwO-—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å (–ª—É—á—à–µ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)")
    async def owoifycmd(self, message):
        """<text:str> - OwO-ify"""
        await utils.answer(message, self.owoify(utils.get_args_raw(message)))

    @loader.command(ru_doc="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ OwO-—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .config –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ)")
    async def toggleowocmd(self, message):
        """Toggle auto OwO-ifier (use .config instead)"""
        self.config["enable"] = not self.config["enable"]
        await utils.answer(message, self.strings("done") + (" üü©" if self.config["enable"] else " üü•"))

    @loader.watcher(out=True, only_messages=True, no_commands=True)
    async def new_message(self, message):
        if not self.config["enable"]:
            return

        await utils.answer(message, self.owoify(message.raw_text))
