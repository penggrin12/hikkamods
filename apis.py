# The MIT License (MIT)
# Copyright (c) 2022 penggrin

# meta developer: @penggrinmods
# scope: hikka_only

from .. import loader, utils
import logging

import requests
import random

logger = logging.getLogger(__name__)


@loader.tds
class FunApisMod(loader.Module):
    """Many different api's from all over the internet!"""

    strings = {
        "name": "FunApisMod",
        "chuck": "‚ù§Ô∏è Chuck Norris fact",
        "useless": "‚ù§Ô∏è Useless fact",
        "name_error": "‚ùå Umm.. Something tells us, thats not a name...\n(Or just not an american one!)",
        "name_success": "üëã Hey, {}!\n\n‚ù§Ô∏è You are a {}, with probability of about {}%.\n‚ù§Ô∏è And also you probably about {} years old.\n\n‚ùî Right?",
        "no_zenserp_token": "‚ùå You dont have <b>zenserp</b> token!\n‚ùì You can set it in <code>.config</code>",
        "search_success": "‚ù§Ô∏è Here are {} results that i have found for you!",
    }
    strings_ru = {
        "chuck": "‚ù§Ô∏è –§–∞–∫—Ç –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä—Ä–∏—Å–∞",
        "useless": "‚ù§Ô∏è –ë–µ–∑–ø–æ–ª–µ–∑–Ω—ã–π —Ñ–∞–∫—Ç",
        "name_error": "‚ùå –•–º–º.. –ß—Ç–æ-—Ç–æ –Ω–∞–º –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–º—è...\n(–õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ!)",
        "name_success": "üëã –•–µ–π, {}!\n\n–í—ã {}, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–Ω–æ {}%.\n–ê —Ç–∞–∫–∂–µ –≤–∞–º –ø—Ä–∏–º–µ—Ä–Ω–æ {} –ª–µ—Ç.\n\n–í–µ—Ä–Ω–æ?",
        "no_zenserp_token": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç <b>zenserp</b> —Ç–æ–∫–µ–Ω–∞!\n‚ùì –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ <code>.config</code>",
        "search_success": "‚ù§Ô∏è –í–æ—Ç {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –¥–ª—è –≤–∞—Å –Ω–∞—à—ë–ª!",
    }

    def list_to_str(self, a = None):
        if (a is None) or (len(a) < 1):
            return ""

        return ' '.join(str(b) for b in a)

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "zenserp_token",
                None,
                lambda: "Get this token from <code>zenserp.com</code> to access <code>.gdz</code> command",
            ),
        )

    async def __send(self, message, text: str, photo = None):
        reply = await message.get_reply_message()

        if photo:
            if reply:
                result = await self.client.send_file(message.peer_id, caption = text, file = photo, reply_to = reply)
            else:
                result = await self.client.send_file(message.peer_id, caption = text, file = photo)
        else:
            if reply:
                result = await reply.reply(text)
            else:
                result = await message.respond(text)

        #await utils.answer(message, text, photo=photo)
        await message.delete()

    async def __search(self, message, query, num = 3, lang = "ru"):
        if not self.config["zenserp_token"]:
            await utils.answer(message, self.strings("no_zenserp_token"))
            return

        params = {"q": str(query), "gl": str(lang), "hl": str(lang), "num": str(num)}
        response = requests.get('https://app.zenserp.com/api/v2/search', headers={"apikey": self.config["zenserp_token"]}, params=params)

        return response.json()

    @loader.command(ru_doc="<http code:int> - –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ –Ω–∞ —Ç–µ–º—É http –∫–æ–¥–∞")
    async def cathttpcmd(self, message):
        """<http code:int> - Get a cat that represents a certain http code"""
        args = utils.get_args(message)
        await self.__send(message, utils.ascii_face(), photo = f"https://http.cat/{args[0]}")

    @loader.command(ru_doc="- –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞")
    async def catpiccmd(self, message):
        """- Get a random cat picture"""
        json = requests.get("https://aws.random.cat/meow").json()
        await self.__send(message, utils.ascii_face(), photo = json["file"])

    @loader.command(ru_doc="- –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–±–∞—á–∫–∏")
    async def dogpiccmd(self, message):
        """- Get a random dog picture"""
        json = requests.get("https://random.dog/woof.json").json()
        await self.__send(message, utils.ascii_face(), photo = json["url"])

    @loader.command(ru_doc="- –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É")
    async def jokecmd(self, message):
        """- Get a random joke"""
        json = requests.get("https://official-joke-api.appspot.com/random_joke").json()
        await self.__send(message, f'1Ô∏è‚É£ {json["setup"]}\n2Ô∏è‚É£ <tg-spoiler>{json["punchline"]}</tg-spoiler>')

    @loader.command(ru_doc="- –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –§–∞–∫—Ç –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä—Ä–∏—Å–∞")
    async def chuckcmd(self, message):
        """- Get a hand curated Chuck Norris fact"""
        json = requests.get("https://api.chucknorris.io/jokes/random").json()
        await self.__send(message, f"{self.strings('chuck')} üëá\n\n{json['value']}")

    @loader.command(ru_doc="- –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ë–µ–∑–ø–æ–ª–µ–∑–Ω—ã–π —Ñ–∞–∫—Ç")
    async def uselesscmd(self, message):
        """- Get a random useless fact"""
        json = requests.get("https://uselessfacts.jsph.pl/random.json?language=en").json()
        await self.__send(message, f"{self.strings('useless')} üëá\n\n{json['text']}")

    @loader.command(ru_doc="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–ª—è –º–µ–º–∞")
    async def memetemplatecmd(self, message):
        """- Get a random meme template"""
        json = requests.get("https://api.imgflip.com/get_memes").json()
        meme = random.choice(json['data']['memes'])
        await self.__send(message, f"{meme['name']}", photo = meme['url'])

    @loader.command(ru_doc="–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –≤–∞—à–µ –∏–º—è")
    async def aboutmecmd(self, message):
        """<firstname:str> - Get some information about someones name"""
        args = utils.get_args(message)
        name = args[0].lower()
        age = requests.get(f"https://api.agify.io/?name={name}").json()
        gender = requests.get(f"https://api.genderize.io/?name={name}").json()

        if (age['age'] != None) and (gender['gender'] != None):
            await self.__send(message, self.strings("name_success").format(name, gender["gender"], gender['probability'] * 100, age["age"]))
        else:
            await self.__send(message, self.strings("name_error"))

    @loader.command(ru_doc="<query:str> - –ù–∞–π—Ç–∏ –≥–¥–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    async def gdzcmd(self, message):
        """<query:str> - Will search "–≥–¥–∑ <query>" and show up to 3 results"""
        q = utils.get_args_raw(message)

        response = await self.__search(message, f"–≥–¥–∑ {q}")
        result = f"{self.strings('search_success').format(len(response))}\n\n"

        for i in response["organic"]:
            result += f'üìÑ <b>{i["title"]}</b>\nüîó {i["url"]}\n\n'

        await self.__send(message, result)

    @loader.command(ru_doc="<query:str> - –ù–∞–π—Ç–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    async def searchcmd(self, message):
        """<query:str> - Will search "<query>" and show up to 10 results"""
        q = utils.get_args_raw(message)

        response = await self.__search(message, q)
        result = f"{self.strings('search_success').format(len(response))}\n\n"

        for i in response["organic"]:
            result += f'üìÑ <b>{i["title"]}</b>\nüîó {i["url"]}\n\n'

        await self.__send(message, result)

        
