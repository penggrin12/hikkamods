# The MIT License (MIT)
# Copyright (c) 2022 penggrin

# meta developer: @PenggrinModules
# scope: hikka_only

from .. import loader, utils
import logging

logger = logging.getLogger(__name__)


@loader.tds
class VahuiMod(loader.Module):
    """Auto-Respond to "–≤–∞—Ö—É–∏" """

    strings = {
        "name": "VahuiMod",
        "config_enable": "Status of this module",
        "config_vahuis": "Vahuis that we can respond to",
        "config_response": "The reponse we will give",
        "done": "‚ù§Ô∏è Done!",
    }

    strings_ru = {
        "config_enable": "–°—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è",
        "config_vahuis": "–í–∞—Ö—É–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å",
        "config_response": "–û—Ç–≤–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–∞–¥–∏–º",
        "done": "‚ù§Ô∏è –ì–æ—Ç–æ–≤–æ!",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enable",
                True,
                lambda: self.strings("config_enable"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "response",
                "–≤—Ç—Ä–∏—Ö—É–∏",
                lambda: self.strings("config_response"),
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "vahuis",
                ["–≤–∞—Ö—É–∏", "–≤–∞—Ö—É–π"],
                lambda: self.strings("config_vahuis"),
                validator=loader.validators.Series(loader.validators.String()),
            ),
        )

    @loader.command(ru_doc="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç –Ω–∞ '–≤–∞—Ö—É–∏' (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .config –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ)")
    async def togglevahuicmd(self, message):
        """Toggle the auto-answer to 'vahui' (use .config instead)"""
        self.config["enable"] = not self.config["enable"]
        await utils.answer(message, self.strings("done") + (" üü©" if self.config["enable"] else " üü•"))

    @loader.watcher(only_messages=True, no_commands=True)
    async def new_message(self, message):
        if not self.config["enable"]:
            return

        for vahui in self.config["vahuis"]:
            if vahui in message.raw_text.lower():
                logger.debug('Responding "%s" to a "%s"', self.config["response"], message.raw_text)
                await utils.answer(message, self.config["response"])
