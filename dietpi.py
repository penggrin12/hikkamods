# The MIT License (MIT)
# Copyright (c) 2023 penggrin

# meta developer: @PenggrinModules
# requires: psutil distro
# scope: hikka_only

from .. import loader, utils
import logging

import subprocess
import psutil
import time
import distro
import re

logger = logging.getLogger(__name__)


def b2m(b: int) -> int:
    return round(b / 1024 / 1024, 1)


@loader.tds
class DietPiMod(loader.Module):
    """Control ya DietPi remotely (tested on Raspberry Pi 3 b+)"""

    strings = {
        "name": "DietPi",
        "info": (
            "\nüå° CPU Temperature: `{}`"
            "‚ö°Ô∏è Voltage: `{}`"
            "üîº Uptime: `{}`"
            "\n"
            "üñ• CPU: `{}` Cores (`{}%`)\n"
            "üíΩ RAM: `{}` MB / `{}` MB (`{}%`)\n"
            "üíæ Disk: `{}` MB / `{}` MB (`{}%`)"
        ),
        "shutting": "üîÑ Shutting down!\nüîÑ Bye!!!",
        "rebooting": "üîÑ Rebooting...",
        "rebooted": "‚úÖ Done Rebooting! ({}s)",
        "started": "üí´ <b>{}</b> Started!",
        "low_voltage": "‚ö†Ô∏è Low Voltage Detected!\n",
        "high_temp": "‚ö†Ô∏è High CPU Temperature Detected!\n",
        "low_voltage_threshold_config": "Low Voltage Warning Threshold",
        "high_temperature_threshold_config": "High Temperature Warning Threshold",
        "dcpu_output": "üñ• CPU Info:",
    }

    strings_ru = {
        "info": (
            "\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: `{}`"
            "‚ö°Ô∏è –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: `{}`"
            "üîº –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{}`"
            "\n"
            "üñ• CPU: `{}` –Ø–¥–µ—Ä (`{}%`)\n"
            "üíΩ –û–ó–£: `{}` –ú–ë / `{}` –ú–ë (`{}%`)\n"
            "üíæ –î–∏—Å–∫: `{}` –ú–ë / `{}` –ú–ë (`{}%`)"
        ),
        "shutting": "üîÑ –í—ã–∫–ª—é—á–∞—é—Å—å!\nüîÑ –ü–æ–∫–∞!!!",
        "rebooting": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...",
        "rebooted": "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è! ({}—Å)",
        "started": "üí´ <b>{}</b> –ó–∞–ø—É—â–µ–Ω!",
        "low_voltage": "‚ö†Ô∏è –ó–∞–º–µ—á–µ–Ω–æ –Ω–∏–∑–∫–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ!\n",
        "high_temp": "‚ö†Ô∏è –ó–∞–º–µ—á–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU!\n",
        "low_voltage_threshold_config": "–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏",
        "high_temperature_threshold_config": "–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ",
        "dcpu_output": "üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è CPU:",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "low_voltage_threshold",
                1.3,
                doc=lambda: self.strings("low_voltage_threshold_config"),
                validator=loader.validators.Float(),
            ),
            loader.ConfigValue(
                "high_temp_threshold",
                60,
                doc=lambda: self.strings("high_temperature_threshold_config"),
                validator=loader.validators.Integer(),
            ),
        )

    async def client_ready(self):
        if not self.get("rebooting"):
            await self._client.send_message("me", self.strings("started").format(distro.name(pretty=True)))
            return

        logger.debug("Done rebooting!")

        chat_id, message_id = self.get("rebooting").split(":")
        chat_id, message_id = int(chat_id), int(message_id)
        time_passed = int(time.time() - self.get("reboot_time"))
        await self._client.edit_message(chat_id, message_id, self.strings("rebooted").format(time_passed))

        self.set("rebooting", None)

    def reformat(self, text):
        return "{}\n  <code>{}\n</code>".format(
            self.strings('dcpu_output'),
            re.sub(
                r"\[\d*m|\[\d*;\d*m|\[\d*;\d*;\d*m",
                "",
                text,
            )
        ).replace("‚îÄ" * 53, "‚îÄ" * 10)

    @loader.command(ru_doc="–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–æ–µ–π Diet Pi –º–∞—à–∏–Ω–µ")
    async def dinfocmd(self, message):
        """Get some information about ur Diet Pi machine"""
        temp = (subprocess.check_output(['sudo', '-n', 'vcgencmd', 'measure_temp']).decode("utf-8")).split("=")[1]
        voltage = (subprocess.check_output(['sudo', '-n', 'vcgencmd', 'measure_volts']).decode("utf-8")).split("=")[1]
        uptime = (subprocess.check_output(['uptime', '-p']).decode("utf-8")).split("up ")[1]
        cores = psutil.cpu_count(logical=True)
        cpu = psutil.cpu_percent()
        ram = b2m(psutil.virtual_memory().total - psutil.virtual_memory().available)
        ram_total = b2m(psutil.virtual_memory().total)
        ram_perc = psutil.virtual_memory().percent
        hdd = psutil.disk_usage('/')

        await utils.answer(
            message,
            f"üçá **{distro.name(pretty=True)}**\n\n"
            + (self.strings("low_voltage") if float(voltage.split("V")[0]) < self.config["low_voltage_threshold"] else "")
            + (self.strings("high_temp") if float(temp.split("'C")[0]) > self.config["high_temp_threshold"] else "")
            + self.strings('info').format(
                temp, voltage, uptime, cores, cpu, ram, ram_total,
                ram_perc, b2m(hdd.used), b2m(hdd.total), hdd.percent
            ),
            parse_mode="Markdown"
        )

    @loader.command(ru_doc="–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ —Ç–≤–æ–µ–π Diet Pi –º–∞—à–∏–Ω—ã")
    async def dcpucmd(self, message):
        """Get some information about cpu of ur Diet Pi machine"""
        info = self.reformat(subprocess.check_output(["sudo", "bash", "/boot/dietpi/dietpi-cpuinfo"]).decode("utf-8"))
        await utils.answer(message, info)

    @loader.command(ru_doc="–í—ã–∫–ª—é—á–∏—Ç—å Raspberry Pi")
    async def shutdowncmd(self, message):
        """Shutdown Raspberry Pi"""
        await utils.answer(message, self.strings("shutting"))
        subprocess.run(["sudo", "shutdown", "now"])

    @loader.command(ru_doc="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Raspberry Pi")
    async def rebootcmd(self, message):
        """Reboot Raspberry Pi"""
        msg = await utils.answer(message, self.strings("rebooting"))
        self.set("rebooting", f"{utils.get_chat_id(msg)}:{msg.id}")
        self.set("reboot_time", time.time())
        subprocess.run(["sudo", "reboot"])
